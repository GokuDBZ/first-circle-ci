# we will learn about commands

# Command is a collection of steps. It is useful for creating reusable steps which means steps which are common in multiple jobs
# can be seperated out in a command and then call those steps using single command name


# In basic_6.yml we have few same steps running in both jobs so we can just seperate them out in a command and use them with just onc command name



version: 2.1 

# if we have multiple environments then we can make multiple executors
executors:
  ruby_executor:
    docker:
      - image: circleci/ruby:2.5.1
  
  # python_executor: # we can any no of e
  #   docker:
  #     - image: python

commands:
  install_gems_and_checkout:
    parameters:
      my_message:
        type: "string"
        default: "hello world"
    steps:
      - checkout
      - run: "ruby -v" 
      - run: "gem install bundler"
      - run: "bundle install"
      - run: echo "<< parameters.my_message  >>"
  

jobs: 
  build: 
    executor: ruby_executor
    steps: 
      - install_gems_and_checkout:
          my_message: "this is build"
      
  test: 
    docker:
      - image: circleci/ruby:2.5.1
    steps:
      - install_gems_and_checkout:
          my_message: "this is test"
      - run: rspec test.rb

workflows: 
  version: 2 
  build-test:  
    jobs:     
      - build:
          filters: 
            branches:
              only:
                - master
      - test:
          requires:
            - build
          filters:  
            branches:
              only:
                - master
    